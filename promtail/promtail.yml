# example: https://github.com/black-rosary/loki-nginx/blob/master/promtail/promtail.yml
server:
  http_listen_port: 9080
  grpc_listen_port: 0
  log_level: "warn"

positions:
  filename: /var/lib/promtail/positions/positions.yaml

client:
  url: http://loki:3100/api/prom/push

scrape_configs:
  - job_name: system

    static_configs:
      - targets:
          - localhost
        labels:
          job: varlogs
          __path__: /var/log/*log
          __path_exclude__: /var/log/traefik_access*

    pipeline_stages:
      - match:
          selector: '{job="varlogs",filename="/var/log/traefik_access.log"}'
          action: drop

  - job_name: containers

    static_configs:
      - targets:
          - localhost
        labels:
          job: docker
          # wsl: \\wsl.localhost\docker-desktop-data\version-pack-data\community\docker\containers\
          # ubuntu: /var/lib/docker/containers/
          __path__: /var/lib/docker/containers/*/*log

    pipeline_stages:
      - json:
          expressions:
            log: log
            stream: stream
            attrs: attrs
            tag: attrs.tag
            time: time
      - timestamp:
          source: time
          format: RFC3339Nano
      - regex:
          # expression set by tag: "{{.ImageName}}|{{.Name}}|{{.ID}}"
          expression: ^(?P<image>([^|]+))\|(?P<service>([^|]+))\|(?P<container_id>([^|]+))$
          source: "tag"
      - labels:
          docker_image: image
          docker_service: service
          docker_container_id: container_id
          docker_timestamp: timestamp
      - output:
          source: log

      - match:
          # drop all logs for all containers that don't have --log-opt: tag: "{{.ImageName}}|{{.Name}}|{{.ID}}"
          selector: '{job="docker",docker_image="",docker_service="",docker_container_id=""}'
          action: drop

  - job_name: access_logs

    static_configs:
      - targets:
          - localhost
        labels:
          job: traefik_access_log
          __path__: /var/log/traefik_access.log

    pipeline_stages:
      - regex:
          # <remote_IP_address> - <client_user_name_if_available> [<timestamp>] "<request_method> <request_path> <request_protocol>" <origin_server_HTTP_status> <origin_server_content_size> "<request_referrer>" "<request_user_agent>" <number_of_requests_received_since_Traefik_started> "<Traefik_router_name>" "<Traefik_server_URL>" <request_duration_in_ms>ms
          expression: '^(?P<ip>\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3})\s+(?P<client_user_name>.+?)\s\[(?P<timestamp>.+?)\] "(?P<request_method>\w+)\s(?P<request_path>.+?)\s(?P<request_protocol>.+?)"\s(?P<http_status>\d{3})\s(?P<content_size>\d+)\s"(?P<request_referrer>.+?)"\s"(?P<request_user_agent>.+?)"\s(?P<request_number>\d+)\s"(?P<service>.+?)@(?P<provider>.+?)"\s"(?P<url>.+?)"\s(?P<duration_ms>\d+)ms'
      - labels:
          traefik_ip: ip
          traefik_client_user_name: client_user_name
          traefik_timestamp: timestamp
          traefik_request_method: request_method
          traefik_request_path: request_path
          traefik_request_protocol: request_protocol
          traefik_http_status: http_status
          traefik_content_size: content_size
          traefik_request_referrer: request_referrer
          traefik_request_user_agent: request_user_agent
          traefik_request_number: request_number
          traefik_service: service
          traefik_provider: provider
          traefik_url: url
          traefik_duration_ms: duration_ms
